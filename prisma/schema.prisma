generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String             @id @default(cuid())
  email              String             @unique
  name               String?
  password           String?
  role               String             @default("user")
  tokens             Int                @default(10)
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  emailVerified      DateTime?
  image              String?
  accounts           Account[]
  campaigns          Campaign[]
  characters         Character[]
  encounters         Encounter[]
  generationStatuses GenerationStatus[]
  items              Item[]
  npcs               NPC[]
  quests             Quest[]
  sessions           Session[]
  tokenTransactions  TokenTransaction[]
  worlds             World[]
}

model Character {
  id          String    @id @default(cuid())
  name        String
  race        String
  class       String
  level       Int       @default(1)
  portraitUrl String?
  userId      String
  campaignId  String?
  autoSave    Boolean   @default(false)
  expiresAt   DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  data        Json?
  campaign    Campaign? @relation(fields: [campaignId], references: [id])
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model NPC {
  id          String    @id @default(cuid())
  name        String
  race        String
  role        String
  portraitUrl String?
  userId      String
  campaignId  String?
  autoSave    Boolean   @default(false)
  expiresAt   DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  data        Json?
  campaign    Campaign? @relation(fields: [campaignId], references: [id])
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model World {
  id          String    @id @default(cuid())
  name        String
  theme       String
  landName    String
  userId      String
  campaignId  String?
  autoSave    Boolean   @default(false)
  expiresAt   DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  data        Json?
  campaign    Campaign? @relation(fields: [campaignId], references: [id])
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Item {
  id          String    @id @default(cuid())
  name        String
  itemType    String
  theme       String
  rarity      String
  userId      String
  campaignId  String?
  autoSave    Boolean   @default(false)
  expiresAt   DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  data        Json?
  campaign    Campaign? @relation(fields: [campaignId], references: [id])
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Quest {
  id          String    @id @default(cuid())
  title       String
  userId      String
  campaignId  String?
  autoSave    Boolean   @default(false)
  expiresAt   DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  data        Json?
  campaign    Campaign? @relation(fields: [campaignId], references: [id])
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Encounter {
  id          String    @id @default(cuid())
  name        String
  userId      String
  campaignId  String?
  autoSave    Boolean   @default(false)
  expiresAt   DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  data        Json?
  campaign    Campaign? @relation(fields: [campaignId], references: [id])
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model TokenTransaction {
  id          String   @id @default(cuid())
  userId      String
  type        String
  amount      Int
  description String
  timestamp   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Campaign {
  id                 String      @id @default(cuid())
  name               String
  description        String?
  characterSlots     Int?        @default(4)
  status             String      @default("active")
  userId             String
  autoSave           Boolean     @default(false)
  expiresAt          DateTime?
  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @updatedAt
  data               Json?
  user               User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  campaignCharacters Character[]
  campaignEncounters Encounter[]
  campaignItems      Item[]
  campaignNpcs       NPC[]
  campaignQuests     Quest[]
  campaignWorlds     World[]
}

model GenerationStatus {
  id            String   @id @default(cuid())
  userId        String
  status        String
  progress      Int      @default(0)
  stage         String
  estimatedTime Int      @default(0)
  result        String?
  error         String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Feedback {
  id            String   @id @default(cuid())
  name          String
  email         String?
  feedbackType  String
  rating        Int?
  message       String
  status        String   @default("new") // new, reviewed, resolved, closed
  adminNotes    String?
  reviewedBy    String?
  reviewedAt    DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}
